* Introduction
This internship is about taking the current WebPLM implementation as well as the adapted PLM version ('library' branch) and cutting it in two scalable halves.
The final version should handle code execution in a different environnement for each compilation/execution request.
Link for the separated WebPLM :
https://github.com/TanguyGloaguen/webPLM/tree/separation-WebPLM
https://github.com/BuggleInc/webPLM/tree/split
Link for the worker :
https://github.com/TanguyGloaguen/WebPLM_Worker
https://github.com/BuggleInc/PLM-judge

* Findings
* Development
* Journal
** Entry 2015-08-11
- Unlinking WebPLM and Game.
*** Planned work [0/7]
- Remove Game from WebPLM [0/3]
. [ ] Rewrite Git for WebPLM
. [ ] Use HTML from WebPLM directly.
:: status : more than 50% done.
. [ ] Create global data container.
:: status : started
- [ ] Localize compilation interrupt/crash messages in client.
- [ ] Dynamically send data to judges.
- [ ] Remove PLM from judge.
- [ ] Check variable status at execution.
- [ ] Write automatic load balancer.

** Entry 2015-08-06
- Code refactoring
- Threaded tribunal.
*** Planned work [1/8]
- [ ] Remove Game from WebPLM [1/4]
. [X] Thread  tribunal.
:: status : finished.
. [ ] Rewrite Git from WebPLM.
. [ ] Use HTML from WebPLm directly.
. [ ] Create global data container.
- [ ] Localize compilation interrupt / crash message in client.
- [ ] Dynamically send data to judges
- [ ] Remove PLM from judge
- [ ] Check variable status at execution.
- [ ] Write automatic load balancer.

** Entry 2015-08-05
- Added direct demo use
- Generation tool for current & future static data.
*** Planned work [2/10]
- [ ] Remove Game from WebPLM
. [ ] Thread tribunal.
:: status : not done.
. [ ] Rewrite Git for WebPLM
:: status : on hold.
. [X] Auto-generate exercise list
:: status : done
. [X] Use generated exercise JSOn when requested.
:: status : 50% done (demo)
. [ ] Instantiate each exercise once. -> Use HTML from WebPLM directly.
:: status : cancelled, better option is to discard exercise structure and just use HTML.
. [ ] Use previously instantiated exercises as data container -> Create global data container
:: status : model created. Ongoing writing.
- [ ] Dynamically send data to judges.
:: status : data to send modeling.
- [ ] Remove PLM from judge
:: status : not started.
- [ ] Check variable status at execution
:: status : on hold.
- [ ] Write automatic load balancer.
:: status : not started.

** Entry 2015-07-30
- Stopped working on the GIT rewrite.
:: Waiting for Matthieu to come back, some implementations problems to ask too.
- Continued working on direct use of lessons / exercises
*** Questions :
**** Commit question
The new structure of PLM forces the software to consider execution, execution result and user state as three different items. There is some GIT commits that became more difficult to write as a result. This include (but not limited to) :
- All commits having the last outcome.
- All commits having the PLM version (is it the judge version ? the WebPLM version ?)
I'd like some infos on what to re-implement, and what to discard, as well as some infos on what replacements to use for things that are not there anymore.
*** Planned work [1/11]
- [ ] Remove Game from WebPLM
. [ ] Thread tribunal
:: status : not done.
. [ ] Rewrite Git functions to be used from WebPLM directly.
:: status : on hold (see above)
. [X] Generate "start" exercise JSON.
:: note : already completed a few days ago.
. [ ] Use "start" exercise JSON when requested.
:: status : Rewriting call functions.
. [ ] Auto-generate exercise list.
:: status : not started.
. [ ] Instantiate each exercise once.
:: status : not started (model written)
. [ ] Use previously instantiated exercises as data containers.
:: status : Model creation for data containers.
. [ ] Encapsulate user status
:: status : model created, writing code.
- [ ] Dynamically send data to judges.
:: status : data to send modeling.
- [ ] Remove PLM from judge
:: status : not started.
- [ ] Check variable status at execution
:: status : on hold.
- [ ] Write automatic load balancer.
:: status : not started.

** Entry 2015-07-29
- Continued to rewrite GIT for WebPLM
- Continued to work on direct usage of lessons & exercises
*** Observations
- I don't know why I cant access pictures from WebPLM... I routed files at the right place though.
:: Will see with Matthieu when he come back, maybe he'll know.
*** Planned work [0/6]
- [ ] Make WebPLM non game dependant
. [ ] Rewrite GIT functions to be used from WebPLM directly.
:: status : in progress
. [ ] Rewrite WebPLM JSON to be either generated from worlers or pre-generated.
:: status : initial state use in implementation.
- [ ] Dynamically send data to judges
:: status : model created; not started.
- [ ] Remove PLM from judge
:: status : not started
- [ ] Check variable status at execution.
:: status : on hold
- [ ] Write automatic load balancer.
:: status : not started.

** Entry 2015-07-28
- Started rewriting GIT for WebPLM directly
- Started lesson extracting & usage from WebPLM instead of PLM.
*** Planned work [0/6]
- [ ] Make WebPLM non game dependant
. [ ] Rewrite GIT functions to be used from WebPLM
:: status : ongoing.
. [ ] Rewrite WebPLM JSON messages to be either pre-generated or generated by workers.
:: status : initial state generation executed.
- [ ] Dynamically send data to judges.
:: status : model creation in progress.
- [ ] Remove PLM from judge
:: status  not started
- [ ] Check variable status at execution
:: status : on hold.
- [ ] Write automatic judge load balancer
:: status : not started.

** Entry 2015-07-27
- Wrote UML representation of both the PLM 2.X, current WebPLM and upcoming one.
- Generated all (implemented) initial worlds JSON data.
*** Planned work [0/5]
- [ ] Make WebPLM not game-dependant.
:: status : generating static data.
- [ ] Remove PLM from WebPLM
:: status : model creation nearly finished.
- [ ] Remove PLM from judge
:: status : model creation on hold.
- [ ] Check variable status at execution
:: status : on hold.
- [ ] Write automatic judge load balancer.
:: status : not started.

** Entry 2015-07-24
- Removed random from worlds.
- Solved a bug in judges.
*** Planned work [1/6]
- [X] Remove randomness in random worlds.
:: status : finished.
- [ ] Make WebPLM not game-dependant.
:: status : model creation in progress.
- [ ] Remove PLM form WebPLM.
:: status : not started.
- [ ] Remove PLM from judge
:: status : on hold.
- [ ] Check variable status at execution.
:: status : Started, on hold.
- [ ] Write automatic judge load balancer.
:: status : not started.

** Entry 2015-07-23
- Fixed a bunch of things.
- Added stream for Syso.
*** Planned work [6/10]
- [X] Repair Git bug.
:: status : done.
- [X] Clean WebPLM piping structure.
:: status : Done.
- [X] Clean judge structure.
:: status : Done.
- [X] Add output to stream.
:: status : Done.
- [X] Remove randomness in random worlds.
:: status : started.
- [ ] Check variable status at execution
:: status : not started.
- [X] Rewrite Git functions to be used remotely.
:: status : cancelled
- [ ] Write automatic judge load balancer.
:: status : not started
- [ ] Remove PLM from Judges
:: status : not started
- [ ] Remove PLM from WebPLM
:: status : not started.

** Entry 2015-07-21
- Started rewriting Judge structure.
- Finished PLM bug sorting, still can't generate the .jar
*** Planned work [5/8]
- [X] Repair Git bug.
:: status : bug repaired but can't compile yet. Will test on other computer.
- [X] Clean WebPLM piping structure.
:: status : started.
- [X] Clean Judge structure.
:: status : started.
- [X] Add output to stream
:: status : not started
- [ ] Check variable status in judge at execution.
:: status : not started
- [X] Rewrite Git functions to be used remotely
:: status : cancelled
- [ ] Write automatic Judge load balancer.
:: status : not started
- [ ] Remove PLM from WebPLM.
:: status : not started

** Entry 2015-07-20
- Written javadoc of the Judge, cleaned up some output code.
*** Planned work [4/6]
- [X] Repair Git bug.
:: status : nearly done; problem w/ compilation.
- [X] Clean WebPLM piping structure.
:: status : not started.
- [X] Clean Judge structure.
:: status : on hold.
- [X] Add output to stream
:: status : not started
- [ ] Check variable status in judge at execution
:: status : not started.
- [ ] Rewrite GIT functions to be used remotely
:: status : not started

** Entry 2015-07-16
- Docker install completed.
- Fixed some issues with return message queue clutter.
*** Planned work [0/4]
- [ ] 'clean' PLM to limit data carried by judges
:: status : on hold.
- [ ] Rewrite GIT functions to be used from WebPLM directly
:: theorized remote GIT client. On hold.
- [ ] Check variable status in judge at execution (judge-slave separation)
:: status : comes right after controller.
- [ ] Create controller.
:: status : ongoing.

** Entry 2015-07-09
- Docker install (long because a lot of hardware issues)
:: note : not yet complete.
*** Planned work [0/4]
- [ ] 'clean' PLM to limit data carried by judges.
:: status : ongoing. GIT removed today.
- [ ] Rewrite GIT functions to be used from WebPLM directly
:: status : not started yet. ETA end Jul. ?
- [ ] Check variable status in judges at execution.
:: status : on hold. Some studies done.
- [ ] Create controller.
:: status : merely started. (ideal) ETA Friday.

** Entry 2015-07-08
- Removed GIT from PLM.
- Some studies about future Judge structure.
:: see notes 8/7 1-3 or http://i.imgur.com/6SyA1Vt.jpg
- Began working on controller.
*** Planned work [0/4]
- [ ] 'clean' PLM to limit data carried by judges.
:: status : ongoing. GIT removed today.
- [ ] Rewrite GIT functions to be used from WebPLM directly
:: status : not started yet. ETA end Jul. ?
- [ ] Check variable status in judges at execution.
:: status : on hold. Some studies done.
- [ ] Create controller.
:: status : merely started. (ideal) ETA Friday.

** Entry 2015-07-07
- Added failsafe for crashes/infinite loops.
:: 2s message stream timeout / 30s execution limit.
*** Questions
- what am I supposed to retrieve from the remote JVM ? (data + format)
:: stack traces (limit to ~20 of useful ones (cut the top & bottom ones)
:: attribute values.
*** Planned work [2/5]
- [ ] 'clean' PLM to limit data carried by workers.
- [X] Rewrite GIT functions to be used from WebPLM directly.
- [ ] Create controller.
- [ ] Check variable status in workers at execution.
:: status : studying solutions
:: - jdi (com.sun.jdi) and two virtual machines.
:: - add security manager to the second VM
- [X] Failsafe for infinite loops & down workers.
:: status : DONE

** Entry 2015-07-06
- Updated the PLM data with MQ answers.
- Interface WebPLM to handle compilation calls.
- Aggregate stream messages in lists.
- Solve problems with actors eating messages from the MQ
*** Planned work [5/9]
- [X] Interface WebPLM to handle remote compilation calls
:: status : DONE. Second pass coming.
- [X] Update the PLM data with Message Queue answers
:: status : DONE
- [ ] 'clean' PLM to limit data carried by workers.
:: status : started. no ETA
- [X] Rewrite GIT functions to be used from WebPLM directly.
:: status : port in progress. No ETA yet.
- [X] Aggregate stream messages in lists.
:: status : DONE
- [X] Solve problems with actors 'eating' message queue items.
:: status : DONE (will maybe need more tests)
- [ ] Create controller.
- [ ] Check variable status in workers at execution.
- [X] Failsafe for infinite loops in workers & down workers for WebPLM.
:: status : finished for WebPLM. Not yet finished for the worker..

** Entry 2015-07-03
- Finished rewriting GIT push functions to handle remote compilation
- Finished worker-side GIT push data format.
*** Planned work [4/5]
- [X] Interface WebPLM to handle compilation calls
- [X] Update the PLM data with MQ answers
- [ ] 'clean' PLM to limit data caried by workers
- [X] Rewrite GIT functions to be used from WebPLM directly
:: status : execution is rewritten. Rest is coming but later.
- [X] Aggregate stream messages in lists with time synchronization.

** Entry 2015-07-02
- Started to write the GIT push function to handle remote compilation
- Started to write a worker-side GIT push data format.
*** Questions :
- Is it necessary to force "kind" in the commit JSON to first position ?
*** Planned work [3/4]
- [X] Interface WebPLM to handle compilation calls
:: status : 90%. ETA : Monday ?
- [X] Update the PLM data with MQ answers
:: status : well in. ETA this evening.
- [ ] 'clean' PLM to limit data carried by workers
:: status : some leads. ETA early Jul.
- [X] Rewrite GIT functions to be used from WebPLM directly

** Entry 2015-07-01
- Solved the lasting bug.
- Some more JSON converters translated.
*** Planned work [2/3]
- [X] Interface WebPLM to handle compilation calls
:: status : functionnal, about 90% done. ETA after [2]
:: note : might take a little longer to do because of PLM encapsulation.
- [X] Update the PLM data with MQ answers
:: status : started. ETA Thu.
- [ ] 'clean' PLM to limit data carried by workers.
:: status : making notes as the other points progresses. ETA early Jul.

** Entry 2015-06-30
- Finished compilation calls to workers
- Transmission of return messages implemented.
- Stream of world data implemented.
*** Problems to solve :
- A crash (?) happens sometimes. Maybe an old listener not shut down.
:: update 3:30 PM - It seems to be due to the GitSpy being told the code was executed but crashing with a NullPtrEx due to the execution result not being stored.
*** Planned work [3/4]
***** Client/Server implementation
- [X] Interface WebPLM to handle compilation via message queues
:: status : about 75% done. ETA Wed.
- [X] Update the PLM data with MQ answers
:: Status : identified ways to implement. ETA Wed./Thu.
- [X] Include JSON converters directly into the worker.
:: status : DONE
:: Note : buggles done. The rest will come as other problems are solved.
- [ ] 'clean' PLM to limit data carried by workers
:: status : not started. ETA early Jul.

** Entry 2015-06-29
- Learned & used Semaphores.
- Replaced WebPLM compilation calls with (partial) messages to workers.
- Basic structure to retrieve return messages.
*** Problems to solve.
- Problem woth RabbitMQ : some WebPLM actors seems to "eat" the replies for other actors despite the CorrelationID check.
:: Note : queue reinjections don't fix it (infinite loop ?)
:: Note : solution may be in the way we retrieve data from the queue.
*** Planned work [2/4]
**** Client/Server implementation
- [X] Interface WebPLM to handle compilation via message queues.
:: status : structure of code begun. ETA Tue. 18:00
- [X] Update the PLM data with MQ answers
:: status : idientified way to implement. ETA Tue./Wed.
- [X] Include JSON converters directly in the worker.
:: status : tinkered with. ETA Wed.
- [ ] 'clean' PLM to limit data carried by workers
:: status : not started. ETA early Jul.

** Entry 2015-06-26
- More tests with message queues. Ended tutorial, began PLM implementation.
- PLM implementation of message queue handling complete. Some bug solving to do still probably. The code isn't put in to compile yet (2:10 PM).
- A simple client was created to emulate the WebPLM. Basic tests allows me to believe everything is working as intended.
- Code is sent and compiles (tests made in Java with the custom client). Creating repository and cleaning up code. The Git spy still isn't disabled. (2:30 PM)
- Repositories created, Git disabled but the spy will need base PLM package change to be disabled. (3:50 PM)
*** Questions :
- What is a good way to include Scala code in a Java program (library or switch compiler to Scala ?) (see JSON converters for context)
*** Planned work [8/9]
**** Client/Server separation
- [X] Interface WebPLM to handle compilation via message queues.
:: TODO write the sender/consumer part
:: TODO add correlation ID management 
:: status : not started - ETA Tue.
- [X] Update the PLM data with message queue answers 
:: status : not started - ETA Wed.
- [X] Write the worker as a request message queue consumer and a reply message queue sender.
:: DONE
- [X] Include JSON converters written for webPLM directly in the worker.
:: status : tinkered with - ETA Mon.
- [ ] 'clean' PLM to limit data carried by workers.
:: status : not started - ETA early Jul.
- [X] Prepare & write remote calls
:: DONE
:: note : first version, doens't handle lesson/exercise transfer
**** Technologic alternatives.
- [X] Learn about the REST API.
:: CANCELLED
- [X] Learn about message queues
:: DONE

** Entry 2015-06-25
- Set-up Jabber
- Base class & interfaces
- Test with message queues.
*** Questions :
- Is RMI the right technology to handle the worker's return value ? (as of now the worker streams the world states)
- What technology is the right one for this problem, RMI or IDL ?
*** Planned work [4/4]
**** Client/Server separation
- [X] Rewrite PLM to handle remote calls
:: status : technologic alternatives study
- [X] Prepare & write remote calls
:: status : diagrams
**** Technologic alternatives
- [X] Learn about message queues
:: status : tutorial
- [X] Learn about IDL or RMI, choose which one to use.
:: status : in progress

** Entry 2015-06-24
- Set-up dev environment.
*** Planned Work [1/1]
- [X] Do the server/client separation.
:: status : no ETA

* Conclusion
