* Introduction
This internship is about taking the current WebPLM implementation as well as the adapted PLM version ('library' branch) and cutting it in two scalable halves.
The final version should handle code execution in a different environnement for each compilation/execution request.
Link for the separated WebPLM :
https://github.com/TanguyGloaguen/webPLM/tree/separation-WebPLM
Link for the worker :
https://github.com/TanguyGloaguen/WebPLM_Worker

* Findings
* Development
* Journal

** Entry 2015-07-03
- Finished rewriting GIT push functions to handle remote compilation
- Finished worker-side GIT push data format.
*** Planned work [0/5]
- [ ] Interface WebPLM to handle compilation calls
- [ ] Update the PLM data with MQ answers
- [ ] 'clean' PLM to limit data caried by workers
- [ ] Rewrite GIT functions to be used from WebPLM directly
:: status : execution is rewritten. Rest is coming but later.
- [ ] Aggregate stream messages in lists with time synchronization.

** Entry 2015-07-02
- Started to write the GIT push function to handle remote compilation
- Started to write a worker-side GIT push data format.
*** Questions :
- Is it necessary to force "kind" in the commit JSON to first position ?
*** Planned work [0/4]
- [ ] Interface WebPLM to handle compilation calls
:: status : 90%. ETA : Monday ?
- [ ] Update the PLM data with MQ answers
:: status : well in. ETA this evening.
- [ ] 'clean' PLM to limit data carried by workers
:: status : some leads. ETA early Jul.
- [ ] Rewrite GIT functions to be used from WebPLM directly

** Entry 2015-07-01
- Solved the lasting bug.
- Some more JSON converters translated.
*** Planned work [0/3]
- [ ] Interface WebPLM to handle compilation calls
:: status : functionnal, about 90% done. ETA after [2]
:: note : might take a little longer to do because of PLM encapsulation.
- [ ] Update the PLM data with MQ answers
:: status : started. ETA Thu.
- [ ] 'clean' PLM to limit data carried by workers.
:: status : making notes as the other points progresses. ETA early Jul.

** Entry 2015-06-30
- Finished compilation calls to workers
- Transmission of return messages implemented.
- Stream of world data implemented.
*** Problems to solve :
- A crash (?) happens sometimes. Maybe an old listener not shut down.
:: update 3:30 PM - It seems to be due to the GitSpy being told the code was executed but crashing with a NullPtrEx due to the execution result not being stored.
*** Planned work [1/4]
***** Client/Server implementation
- [ ] Interface WebPLM to handle compilation via message queues
:: status : about 75% done. ETA Wed.
- [ ] Update the PLM data with MQ answers
:: Status : identified ways to implement. ETA Wed./Thu.
- [X] Include JSON converters directly into the worker.
:: status : DONE
:: Note : buggles done. The rest will come as other problems are solved.
- [ ] 'clean' PLM to limit data carried by workers
:: status : not started. ETA early Jul.

** Entry 2015-06-29
- Learned & used Semaphores.
- Replaced WebPLM compilation calls with (partial) messages to workers.
- Basic structure to retrieve return messages.
*** Problems to solve.
- Problem woth RabbitMQ : some WebPLM actors seems to "eat" the replies for other actors despite the CorrelationID check.
:: Note : queue reinjections don't fix it (infinite loop ?)
:: Note : solution may be in the way we retrieve data from the queue.
*** Planned work [0/4]
**** Client/Server implementation
- [ ] Interface WebPLM to handle compilation via message queues.
:: status : structure of code begun. ETA Tue. 18:00
- [ ] Update the PLM data with MQ answers
:: status : idientified way to implement. ETA Tue./Wed.
- [ ] Include JSON converters directly in the worker.
:: status : tinkered with. ETA Wed.
- [ ] 'clean' PLM to limit data carried by workers
:: status : not started. ETA early Jul.

** Entry 2015-06-26
- More tests with message queues. Ended tutorial, began PLM implementation.
- PLM implementation of message queue handling complete. Some bug solving to do still probably. The code isn't put in to compile yet (2:10 PM).
- A simple client was created to emulate the WebPLM. Basic tests allows me to believe everything is working as intended.
- Code is sent and compiles (tests made in Java with the custom client). Creating repository and cleaning up code. The Git spy still isn't disabled. (2:30 PM)
- Repositories created, Git disabled but the spy will need base PLM package change to be disabled. (3:50 PM)
*** Questions :
- What is a good way to include Scala code in a Java program (library or switch compiler to Scala ?) (see JSON converters for context)
*** Planned work [4/8]
**** Client/Server separation
- [ ] Interface WebPLM to handle compilation via message queues.
:: TODO write the sender/consumer part
:: TODO add correlation ID management 
:: status : not started - ETA Tue.
- [ ] Update the PLM data with message queue answers 
:: status : not started - ETA Wed.
- [X] Write the worker as a request message queue consumer and a reply message queue sender.
:: DONE
- [ ] Include JSON converters written for webPLM directly in the worker.
:: status : tinkered with - ETA Mon.
- [ ] 'clean' PLM to limit data carried by workers.
:: status : not started - ETA early Jul.
- [X] Prepare & write remote calls
:: DONE
:: note : first version, doens't handle lesson/exercise transfer
**** Technologic alternatives.
- [X] Learn about the REST API.
:: CANCELLED
- [X] Learn about message queues
:: DONE

** Entry 2015-06-25
- Set-up Jabber
- Base class & interfaces
- Test with message queues.
*** Questions :
- Is RMI the right technology to handle the worker's return value ? (as of now the worker streams the world states)
- What technology is the right one for this problem, RMI or IDL ?
*** Planned work [3/4]
**** Client/Server separation
- [ ] Rewrite PLM to handle remote calls
:: status : technologic alternatives study
- [X] Prepare & write remote calls
:: status : diagrams
**** Technologic alternatives
- [X] Learn about message queues
:: status : tutorial
- [X] Learn about IDL or RMI, choose which one to use.
:: status : in progress

** Entry 2015-06-24
- Set-up dev environment.
*** Planned Work [0/1]
- [ ] Do the server/client separation.
:: status : no ETA

* Conclusion
